server:
  port: ${PARAM_SERVER_PORT:80881}
  servlet:
    context-path: /skeleton
management:
  server:
    port: ${PARAM_MANAGEMENT_SERVER_PORT:8088}
  endpoints:
    web:
      base-path: /
      exposure:
        include: health,info,prometheus
      path-mapping:
        health: /actuator/health
        prometheus: /prometheus/metrics

# Config profile
spring:
  profiles:
    active: dev
  # Config kafka producer
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  #Config file size upload
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
  # Config mail
  mail:
    host: ${EMAIL.HOST:smtp.gmail.com}
    port: ${EMAIL.PORT:587}
    username: ${EMAIL.USERNAME:staying.booking.online@gmail.com}
    password: ${EMAIL.PASSWORD:cfoarjgkprvmvgvx}
    properties:
      mail:
        smtp:
          auth: ${EMAIL.AUTH:true}
          starttls:
            enable: ${EMAIL.ENABLE:true}
  datasource:
    url: jdbc:postgresql://${POSTGRES.HOST:localhost}:${POSTGRES.PORT:5432}/${POSTGRES.DATABASE:project_sale}
    username: ${POSTGRES.USER:postgres}
    password: ${POSTGRES.PASSWORD:password}
    hikari:
      connectionTimeout: ${DATASOURCE.CONNECTION.TIMEOUT:30000}
      idleTimeout: ${DATASOURCE.IDLE.TIMEOUT:600000}
      maxLifetime: ${DATASOURCE.MAX_LIFE_TIME:0}
      minimum-idle: ${DATASOURCE.MINIMUM_IDLE:5}
      maximum-pool-size: ${DATASOURCE.MAXIMUM_POOL_SIZE:50}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  #    show-sql: ${JPA.SHOW_SQL:true}
  #    properties:
  #      hibernate:
  #        format_sql: ${FORMAT_SQL:true}
  #        use_nationalized_character_data: ${USE_NATIONALIZED_CHARACTER_DATA:true}
  #        enable_lazy_load_no_trans: ${LAZY_LOAD:true}
  #    hibernate:
  #      ddl-auto: update
  flyway:
    enabled: false
    locations: classpath:db/migration
    baselineOnMigrate: ${FLYWAY.BASE_LINE_ON_MIGRATE:true}
    baselineVersion: ${FLYWAY.BASE_LINE_VERSION:0}
    baseline-description: "init database"

#logging:
#  level:
#    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG

logging:
  level:
    #    root: TRACE
    #    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
#  pattern:
#    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"


# URL if using microservice
internal-url:
  configuration-service:

# Jwt secret key
application:
  security:
    jwt:
      secret-key: ${SECRET.KEY:6KGMeQrk6AGC6xJMBeqWwkY/udp6ALKljw5RTHevYlhutlKMrG4/qnIsaq5G46BJ}
      expiration: ${JWT_EXPIRATION:86400000} # a day
      refresh-token:
        expiration: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000} # 7 days

# Config redis
redis:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}

#Config application
app:
  folder:
    upload: "D:/storages/"